{"version":3,"sources":["appStyles.ts","common/ModalStyles.ts","redux/actions/toDos.ts","components/NewToDoModal/NewToDoModal.tsx","redux/actionCreators/toDos.ts","assets/delete.svg","assets/completed.svg","components/ToDo/Styles.ts","components/EditToDoModal/EditToDoModal.tsx","components/ToDo/ToDo.tsx","components/ToDos/Styles.ts","components/ToDos/ToDos.tsx","assets/plus.svg","App.tsx","fonts/Gilroy-Medium.eot","fonts/Gilroy-Medium.ttf","fonts/Gilroy-Medium.woff","fonts/Gilroy-Extrabold.eot","fonts/Gilroy-Extrabold.ttf","fonts/Gilroy-Extrabold.woff","globalStyles.ts","redux/reducers/toDos.ts","redux/store.ts","index.tsx"],"names":["Wrapper","styled","div","Content","Header","header","Title","h1","NoToDosTitle","h2","Button","button","AddButton","props","background","ModalWrapper","Buttons","add","TextArea","textarea","height","edit","ErrorMessage","p","actions","ADD_TODO","TOGGLE_TODO","DELETE_TODO","EDIT_TODO","NewToDoModal","closeModal","newToDoId","useState","id","title","completed","newToDo","setNewToDo","errorMessageVisible","setErrorMessageVisible","dispatch","useDispatch","placeholder","onChange","event","target","value","close","onClick","trim","type","payload","ToDoItem","li","label","isDone","Checkbox","input","icon","DeleteButton","span","EditToDoModal","prevTitle","newTitle","setNewTitle","onSaveClickHandler","editToDo","onChangeHandler","defaultValue","ToDo","editMode","setEditToDo","editToDoModalVisible","setEditToDoModalVisible","onTitleClickEditMode","onDeleteClickHandler","deleteButton","disabled","checked","completedCheckbox","htmlFor","onTitleClickHandler","ToDosList","ul","ToDos","toDos","map","App","useSelector","state","lastToDoId","length","newToDoModalVisible","setNewToDoModalVisible","setEditMode","plus","GlobalStyles","createGlobalStyle","GilroyMediumEot","GilroyMediumWoff","GilroyMediumTtf","GilroyExtraboldEot","GilroyExtraboldWoff","GilroyExtraboldTtf","initialState","toDo","filter","rootReducer","combineReducers","store","createStore","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3f6b3a80.chunk.js","sourcesContent":["import styled from 'styled-components'\r\n\r\nexport const Wrapper = styled.div`\r\n  background-color: #ffffff;\r\n  overflow: hidden;\r\n`\r\n\r\nexport const Content = styled.div`\r\n  padding: 60px 40px 40px 40px;\r\n  max-width: 768px;\r\n  margin: 0 auto;\r\n  min-height: 100vh;\r\n`\r\n\r\nexport const Header = styled.header`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  margin-bottom: 48px;\r\n`\r\n\r\nexport const Title = styled.h1`\r\n  font-size: 28px;\r\n  font-weight: 800;\r\n`\r\nexport const NoToDosTitle = styled.h2`\r\n  font-size: 18px;\r\n  font-weight: 500;\r\n`\r\n\r\nexport const Button = styled.button`\r\n  width: 86px;\r\n  height: 27px;\r\n  background-color: #f2f2f2;\r\n  border-radius: 4px;\r\n  border: none;\r\n  outline: none;\r\n  cursor: pointer;\r\n`\r\n\r\ninterface IAddButton {\r\n  background: string\r\n}\r\n\r\nexport const AddButton = styled.button<IAddButton>`\r\n  position: fixed;\r\n  bottom: 40px;\r\n  right: 40px;\r\n  width: 60px;\r\n  height: 60px;\r\n  border: none;\r\n  outline: none;\r\n  box-shadow: 0px 10px 40px rgba(0, 0, 0, 0.1);\r\n  border-radius: 50%;\r\n  background: url(${(props) => props.background}) center no-repeat;\r\n  background-color: #ffffff;\r\n  cursor: pointer;\r\n`\r\n","import styled from 'styled-components'\r\n\r\nexport const ModalWrapper = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  flex-direction: column;\r\n  width: 100%;\r\n  height: 78vh;\r\n  padding: 40px;\r\n  position: absolute;\r\n  bottom: 0;\r\n  left: 0;\r\n  z-index: 999;\r\n  box-shadow: 0px 0px 40px rgba(0, 0, 0, 0.1);\r\n  border-radius: 40px 40px 0px 0px;\r\n  background-color: #ffffff;\r\n  animation: 0.5s slidein forwards;\r\n  @keyframes slidein {\r\n    0% {\r\n      bottom: -100vh;\r\n    }\r\n    100% {\r\n      bottom: 0;\r\n    }\r\n  }\r\n`\r\nexport const Buttons = styled.div`\r\n  margin-top: 39px;\r\n  display: flex;\r\n`\r\n\r\ninterface IButton {\r\n  add?: boolean\r\n  close?: boolean\r\n}\r\n\r\nexport const Button = styled.button<IButton>`\r\n  width: 137px;\r\n  height: 40px;\r\n  background-color: ${(props) => (props.add ? '#23A3FF' : '#F2F2F2')};\r\n  color: ${(props) => (props.add ? '#ffffff' : '#4D4D4D')};\r\n  border-radius: 10px;\r\n  font-size: 16px;\r\n  border: none;\r\n  outline: none;\r\n  &:first-child {\r\n    margin-right: 21px;\r\n  }\r\n`\r\ninterface ITextArea {\r\n  height: number\r\n  edit: boolean\r\n}\r\n\r\nexport const TextArea = styled.textarea<ITextArea>`\r\n  width: 295px;\r\n  height: ${(props) => props.height}px;\r\n  padding: ${(props) => (props.edit ? '12px' : '20px')} 20px;\r\n  border: 2px solid #e6e6e6;\r\n  border-radius: 10px;\r\n  font-size: 16px;\r\n  outline: none;\r\n  resize: none;\r\n  color: #333333;\r\n  &::placeholder {\r\n    color: #999999;\r\n  }\r\n  box-sizing: border-box;\r\n`\r\nexport const ErrorMessage = styled.p`\r\n  line-height: 22px;\r\n  color: #e85c5c;\r\n  font-size: 14px;\r\n`\r\n","const actions = {\r\n  ADD_TODO: 'SET_TODO',\r\n  TOGGLE_TODO: 'TOGGLE_TODO',\r\n  DELETE_TODO: 'DELETE_TODO',\r\n  EDIT_TODO: 'EDIT_TODO',\r\n}\r\n\r\nexport default actions\r\n","import { useState } from 'react'\r\nimport { useDispatch } from 'react-redux'\r\n\r\nimport {\r\n  Button,\r\n  Buttons,\r\n  ErrorMessage,\r\n  ModalWrapper,\r\n  TextArea,\r\n} from '../../common/ModalStyles'\r\n\r\nimport { addToDo } from '../../redux/actionCreators/toDos'\r\n\r\ninterface INewToDoModal {\r\n  closeModal: () => void\r\n  newToDoId: number\r\n}\r\n\r\nconst NewToDoModal: React.FC<INewToDoModal> = ({ closeModal, newToDoId }) => {\r\n  const [newToDo, setNewToDo] = useState({\r\n    id: 0,\r\n    title: '',\r\n    completed: false,\r\n  })\r\n\r\n  const [errorMessageVisible, setErrorMessageVisible] = useState(false)\r\n\r\n  const dispatch = useDispatch()\r\n\r\n  const onChangeHandler = (title: string) => {\r\n    setNewToDo({\r\n      id: newToDoId,\r\n      title,\r\n      completed: false,\r\n    })\r\n    setErrorMessageVisible(false)\r\n  }\r\n\r\n  const onButtonClickHandler = () => {\r\n    if (newToDo.title.trim() !== '') {\r\n      closeModal()\r\n      dispatch(addToDo(newToDo))\r\n    } else {\r\n      setErrorMessageVisible(true)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <ModalWrapper>\r\n      <TextArea\r\n        height={160}\r\n        edit={false}\r\n        placeholder='Введите текст задачи'\r\n        onChange={(event) => onChangeHandler(event.target.value)}\r\n        value={newToDo.title}\r\n      />\r\n      {errorMessageVisible && <ErrorMessage>Введите задачу</ErrorMessage>}\r\n      <Buttons>\r\n        <Button close onClick={closeModal}>\r\n          Закрыть\r\n        </Button>\r\n        <Button add onClick={onButtonClickHandler}>\r\n          Добавить\r\n        </Button>\r\n      </Buttons>\r\n    </ModalWrapper>\r\n  )\r\n}\r\n\r\nexport default NewToDoModal\r\n","import actions from '../actions/toDos'\r\n\r\nexport const addToDo = (payload: {\r\n  id: number\r\n  title: string\r\n  completed: boolean\r\n}) => ({\r\n  type: actions.ADD_TODO,\r\n  payload,\r\n})\r\n\r\nexport const toggleToDo = (payload: number) => ({\r\n  type: actions.TOGGLE_TODO,\r\n  payload,\r\n})\r\n\r\nexport const deleteToDo = (payload: number) => ({\r\n  type: actions.DELETE_TODO,\r\n  payload,\r\n})\r\n\r\nexport const editToDo = ({\r\n  id,\r\n  newTitle,\r\n}: {\r\n  id: number\r\n  newTitle: string\r\n}) => ({\r\n  type: actions.EDIT_TODO,\r\n  payload: {\r\n    id,\r\n    newTitle,\r\n  },\r\n})\r\n","export default __webpack_public_path__ + \"static/media/delete.eab512e8.svg\";","export default __webpack_public_path__ + \"static/media/completed.80d2f4d7.svg\";","import styled from 'styled-components'\r\n\r\nexport const ToDoItem = styled.li`\r\n  display: flex;\r\n  align-items: center;\r\n  margin-top: 31px;\r\n  \r\n`\r\n\r\ninterface ITitle {\r\n  isDone: boolean\r\n}\r\n\r\nexport const Title = styled.label<ITitle>`\r\n  font-size: 18px;\r\n  font-weight: 500;\r\n  color: ${(props) => (props.isDone ? '#666666' : '#000000')};\r\n  transition: 0.3s ease color;\r\n  width: 100%;\r\n  max-width: 768px;\r\n  cursor: pointer;\r\n`\r\n\r\ninterface ICheckbox {\r\n  icon: string\r\n}\r\n\r\nexport const Checkbox = styled.input<ICheckbox>`\r\n  position: absolute;\r\n  z-index: -1;\r\n  opacity: 0;\r\n\r\n  & + label {\r\n    display: flex;\r\n    align-items: center;\r\n    user-select: none;\r\n  }\r\n\r\n  & + label::before {\r\n    content: '';\r\n    display: inline-block;\r\n    height: 18px;\r\n    width: 18px;\r\n    flex: 0 0 auto;\r\n    border: 2px solid #d9d9d9;\r\n    margin-right: 14px;\r\n    border-radius: 50%;\r\n  }\r\n\r\n  &:checked + label::before {\r\n    background: url(${(props) => props.icon}) center no-repeat;\r\n  }\r\n`\r\n\r\ninterface IDeleteButton {\r\n  icon: string\r\n}\r\n\r\nexport const DeleteButton = styled.span<IDeleteButton>`\r\n  flex: 0 0 auto;\r\n  width: 22px;\r\n  height: 22px;\r\n  margin-right: 14px;\r\n  cursor: pointer;\r\n  background: url(${(props) => props.icon}) left no-repeat;\r\n`\r\n","import { useState } from 'react'\r\nimport { useDispatch } from 'react-redux'\r\n\r\nimport {\r\n  Button,\r\n  Buttons,\r\n  ErrorMessage,\r\n  ModalWrapper,\r\n  TextArea,\r\n} from '../../common/ModalStyles'\r\n\r\nimport { editToDo } from '../../redux/actionCreators/toDos'\r\n\r\ninterface IEditToDoModal {\r\n  prevTitle: string\r\n  id: number\r\n  closeModal: () => void\r\n}\r\n\r\nconst EditToDoModal: React.FC<IEditToDoModal> = ({\r\n  prevTitle,\r\n  id,\r\n  closeModal,\r\n}) => {\r\n  const [newTitle, setNewTitle] = useState(prevTitle)\r\n\r\n  const [errorMessageVisible, setErrorMessageVisible] = useState(false)\r\n\r\n  const dispatch = useDispatch()\r\n\r\n  const onSaveClickHandler = (id: number, newTitle: string) => {\r\n    if (newTitle.trim() !== '') {\r\n      closeModal()\r\n      dispatch(editToDo({ id, newTitle }))\r\n    } else {\r\n      setErrorMessageVisible(true)\r\n    }\r\n  }\r\n\r\n  const onChangeHandler = (newTitle: string) => {\r\n    setNewTitle(newTitle)\r\n  }\r\n\r\n  return (\r\n    <ModalWrapper>\r\n      <TextArea\r\n        edit\r\n        height={50}\r\n        onChange={(event) => onChangeHandler(event.target.value)}\r\n        defaultValue={prevTitle}\r\n      />\r\n      {errorMessageVisible && <ErrorMessage>Переименуйте задачу</ErrorMessage>}\r\n      <Buttons>\r\n        <Button close onClick={closeModal}>\r\n          Закрыть\r\n        </Button>\r\n        <Button add onClick={() => onSaveClickHandler(id, newTitle)}>\r\n          Сохранить\r\n        </Button>\r\n      </Buttons>\r\n    </ModalWrapper>\r\n  )\r\n}\r\n\r\nexport default EditToDoModal\r\n","import { useDispatch } from 'react-redux'\r\nimport { useState } from 'react'\r\n\r\nimport deleteButton from '../../assets/delete.svg'\r\nimport completedCheckbox from '../../assets/completed.svg'\r\n\r\nimport { ToDoItem, Title, Checkbox, DeleteButton } from './Styles'\r\n\r\nimport { deleteToDo, toggleToDo } from '../../redux/actionCreators/toDos'\r\n\r\nimport EditToDoModal from '../EditToDoModal/EditToDoModal'\r\n\r\ninterface IToDo {\r\n  title: string\r\n  id: number & string\r\n  completed: boolean\r\n  editMode: boolean\r\n}\r\n\r\nconst ToDo: React.FC<IToDo> = ({ title, id, completed, editMode }) => {\r\n  const dispatch = useDispatch()\r\n\r\n  const [editToDo, setEditToDo] = useState({\r\n    title: '',\r\n    id: 0,\r\n  })\r\n  const [editToDoModalVisible, setEditToDoModalVisible] = useState(false)\r\n\r\n  const onTitleClickHandler = (id: number, title: string) => {\r\n    if (editMode) {\r\n      onTitleClickEditMode(id, title)\r\n    }\r\n  }\r\n\r\n  const onTitleClickEditMode = (id: number, title: string) => {\r\n    setEditToDoModalVisible(true)\r\n    setEditToDo({\r\n      title,\r\n      id,\r\n    })\r\n  }\r\n\r\n  const closeEditToDoModal = () => {\r\n    setEditToDoModalVisible(false)\r\n  }\r\n\r\n  const onDeleteClickHandler = (id: number) => {\r\n    dispatch(deleteToDo(id))\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <ToDoItem>\r\n        {editMode ? (\r\n          <DeleteButton\r\n            icon={deleteButton}\r\n            onClick={() => onDeleteClickHandler(id)}\r\n          />\r\n        ) : (\r\n          <Checkbox\r\n            type='checkbox'\r\n            id={id}\r\n            disabled={editMode}\r\n            checked={completed}\r\n            icon={completedCheckbox}\r\n            onChange={() => dispatch(toggleToDo(id))}\r\n          />\r\n        )}\r\n        <Title\r\n          htmlFor={id}\r\n          isDone={completed}\r\n          onClick={() => onTitleClickHandler(id, title)}>\r\n          {title}\r\n        </Title>\r\n      </ToDoItem>\r\n      {editToDoModalVisible && (\r\n        <EditToDoModal\r\n          prevTitle={editToDo.title}\r\n          id={editToDo.id}\r\n          closeModal={closeEditToDoModal}\r\n        />\r\n      )}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default ToDo\r\n","import styled from 'styled-components'\r\n\r\nexport const ToDosList = styled.ul`\r\n  margin: 0px;\r\n  list-style: none;\r\n`\r\n","import ToDo from '../ToDo/ToDo'\r\nimport { ToDosList } from './Styles'\r\n\r\ninterface IToDo {\r\n  title: string\r\n  id: number & string\r\n  completed: boolean\r\n}\r\n\r\ninterface IToDos {\r\n  toDos: Array<IToDo>\r\n  editMode: boolean\r\n}\r\n\r\nconst ToDos: React.FC<IToDos> = ({ toDos, editMode }) => {\r\n  return (\r\n    <ToDosList>\r\n      {toDos.map(({ title, id, completed }) => (\r\n        <ToDo\r\n          title={title}\r\n          id={id}\r\n          completed={completed}\r\n          editMode={editMode}\r\n          key={id}\r\n        />\r\n      ))}\r\n    </ToDosList>\r\n  )\r\n}\r\n\r\nexport default ToDos\r\n","export default __webpack_public_path__ + \"static/media/plus.284a8f06.svg\";","import { RootState } from './redux/store'\r\nimport { useState } from 'react'\r\nimport { useSelector } from 'react-redux'\r\nimport {\r\n  Wrapper,\r\n  Button,\r\n  Header,\r\n  Content,\r\n  Title,\r\n  AddButton,\r\n  NoToDosTitle,\r\n} from './appStyles'\r\n\r\nimport NewToDoModal from './components/NewToDoModal/NewToDoModal'\r\nimport ToDos from './components/ToDos/ToDos'\r\n\r\nimport plus from './assets/plus.svg'\r\n\r\nconst App = () => {\r\n  const toDos = useSelector((state: RootState) => state.toDos.toDos)\r\n\r\n  const lastToDoId = toDos.length - 1\r\n\r\n  const [newToDoModalVisible, setNewToDoModalVisible] = useState(false)\r\n  const [editMode, setEditMode] = useState(false)\r\n\r\n  const closeNewToDoModal = () => {\r\n    setNewToDoModalVisible(false)\r\n  }\r\n\r\n  const onAddButtonClickHandler = () => {\r\n    setNewToDoModalVisible(true)\r\n  }\r\n\r\n  const onButtonClickHandler = () => {\r\n    setEditMode(!editMode)\r\n  }\r\n\r\n  return (\r\n    <Wrapper>\r\n      <Content>\r\n        <Header>\r\n          <Title>Сегодня</Title>\r\n          {(toDos.length > 0 || editMode) && (\r\n            <Button onClick={onButtonClickHandler}>\r\n              {editMode ? 'Отменить' : 'Править'}\r\n            </Button>\r\n          )}\r\n        </Header>\r\n        {toDos.length > 0 ? (\r\n          <ToDos toDos={toDos} editMode={editMode} />\r\n        ) : (\r\n          <NoToDosTitle>Список задач пуст</NoToDosTitle>\r\n        )}\r\n        {newToDoModalVisible && (\r\n          <NewToDoModal\r\n            closeModal={closeNewToDoModal}\r\n            newToDoId={lastToDoId + 1}\r\n          />\r\n        )}\r\n        {!editMode && (\r\n          <AddButton background={plus} onClick={onAddButtonClickHandler} />\r\n        )}\r\n      </Content>\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nexport default App\r\n","export default __webpack_public_path__ + \"static/media/Gilroy-Medium.2fea647f.eot\";","export default __webpack_public_path__ + \"static/media/Gilroy-Medium.1c23f810.ttf\";","export default __webpack_public_path__ + \"static/media/Gilroy-Medium.85207afd.woff\";","export default __webpack_public_path__ + \"static/media/Gilroy-Extrabold.35fe3e3e.eot\";","export default __webpack_public_path__ + \"static/media/Gilroy-Extrabold.92e435f7.ttf\";","export default __webpack_public_path__ + \"static/media/Gilroy-Extrabold.2f14e13e.woff\";","import { createGlobalStyle } from 'styled-components'\r\n\r\nimport GilroyMediumEot from './fonts/Gilroy-Medium.eot'\r\nimport GilroyMediumTtf from './fonts/Gilroy-Medium.ttf'\r\nimport GilroyMediumWoff from './fonts/Gilroy-Medium.woff'\r\n\r\nimport GilroyExtraboldEot from './fonts/Gilroy-Extrabold.eot'\r\nimport GilroyExtraboldTtf from './fonts/Gilroy-Extrabold.ttf'\r\nimport GilroyExtraboldWoff from './fonts/Gilroy-Extrabold.woff'\r\n\r\nconst GlobalStyles = createGlobalStyle`\r\n  @font-face {\r\n    font-family: 'Gilroy';\r\n    src: url(${GilroyMediumEot});\r\n    src: local('Gilroy'), url(${GilroyMediumWoff}) format('woff'), url(${GilroyMediumTtf}) format('truetype');\r\n    font-weight: 500;\r\n    font-style: normal;\r\n  }\r\n\r\n  @font-face {\r\n    font-family: 'Gilroy';\r\n    src: url(${GilroyExtraboldEot});\r\n    src: local('Gilroy'), url(${GilroyExtraboldWoff}) format('woff'), url(${GilroyExtraboldTtf}) format('truetype');\r\n    font-weight: 800;\r\n    font-style: normal;\r\n  }\r\n\r\n  body {\r\n    font-family: \"Gilroy\";\r\n    font-size: 14px;\r\n    font-weight: 400;\r\n  }\r\n\r\n  button, input, textarea {\r\n    font-family: \"Gilroy\";\r\n  }\r\n\r\n  * {\r\n    margin: 0px;\r\n    padding: 0px;\r\n    -webkit-tap-highlight-color: rgba(0, 0, 0, 0);\r\n  }\r\n\r\n  div {\r\n    box-sizing: border-box;\r\n  }\r\n\r\n`\r\nexport default GlobalStyles\r\n","import actions from '../actions/toDos'\r\n\r\ninterface IToDo {\r\n  id: number\r\n  title: string\r\n  completed: boolean\r\n}\r\n\r\ninterface IToDos {\r\n  toDos: Array<IToDo>\r\n}\r\n\r\nconst initialState: IToDos = {\r\n  toDos: [],\r\n}\r\n\r\nconst toDos = (\r\n  state = initialState,\r\n  { type, payload }: { type: string; payload: any }\r\n) => {\r\n  switch (type) {\r\n    case actions.ADD_TODO:\r\n      return {\r\n        toDos: [...state.toDos, payload],\r\n      }\r\n    case actions.TOGGLE_TODO:\r\n      return {\r\n        toDos: state.toDos.map((toDo: { id: number; completed: boolean }) =>\r\n          toDo.id === payload ? { ...toDo, completed: !toDo.completed } : toDo\r\n        ),\r\n      }\r\n    case actions.DELETE_TODO:\r\n      return {\r\n        toDos: state.toDos.filter(\r\n          (toDo: { id: number }) => toDo.id !== payload\r\n        ),\r\n      }\r\n    case actions.EDIT_TODO:\r\n      return {\r\n        toDos: state.toDos.map((toDo: { id: number }) =>\r\n          toDo.id === payload.id ? { ...toDo, title: payload.newTitle } : toDo\r\n        ),\r\n      }\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nexport default toDos\r\n","import { combineReducers, createStore } from 'redux'\r\nimport toDos from './reducers/toDos'\r\n\r\nconst rootReducer = combineReducers({\r\n  toDos,\r\n})\r\n\r\nexport type RootState = ReturnType<typeof rootReducer>\r\n\r\nconst store = createStore(rootReducer)\r\n\r\nexport default store\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport { Provider } from 'react-redux'\r\nimport App from './App'\r\nimport GlobalStyles from './globalStyles'\r\nimport store from './redux/store'\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <GlobalStyles />\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n)\r\n"],"sourceRoot":""}